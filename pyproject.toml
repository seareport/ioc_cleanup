[tool.poetry]
name = "ioc-cleanup"
version = "0.1.0"
description = ""
authors = ["Panos Mavrogiorgos <pmav99@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.11"
dask = {version = "*", extras = ["array", "dataframe", "diagnostics", "distributed", "complete"]}
geopandas = "*"
geoviews = "*"
holoviews = "*"
hvplot = "*"
multifutures = "*"
pandas = "*"
panel = "*"
searvey = {git = "https://github.com/oceanmodeling/searvey.git", rev = "dev"}
xarray = {version = "*", extras = ["accel", "parallel", "io"]}
utide = "*"
matplotlib = "*"
ipympl = "*"
pydantic = "*"
fastparquet = "*"

[tool.poetry.group.dev.dependencies]
covdefaults = "*"
coverage = {version = "*", extras = ["toml"]}
devtools = "*"
ipdb = "*"
ipykernel = "*"
mypy = "*"
pandas-stubs = "*"
pytest = ">=7.0"
pytest-cov = ">=3"
ipywidgets = "*"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 120
target-version = ['py311']

[tool.pytest.ini_options]
minversion = "7.0"
addopts = ["-ra", "--verbose", "--showlocals", "--tb=short", "--strict-markers", "--strict-config"]
xfail_strict = true
log_cli = false
log_cli_level = "info"
testpaths = [
  "tests",
]
filterwarnings = [
    'ignore:distutils Version classes are deprecated. Use packaging.version instead:DeprecationWarning',
    'ignore:Deprecated call to `pkg_resources.declare_namespace:DeprecationWarning',
]

[tool.coverage.run]
plugins = ["covdefaults"]
source = ["observer"]
concurrency = [
  "multiprocessing",
  "thread",
]
parallel = true
sigterm = true

[tool.coverage.report]
fail_under = 90.0
exclude_lines = [
    'pragma: no cover',
    'raise NotImplementedError',
    'if TYPE_CHECKING:',
    'if typing.TYPE_CHECKING:',
    '@overload',
    '@typing.overload',
    '\(Protocol\):$',
    'typing.assert_never',
    'assert_never',
]

[tool.poetry-dynamic-versioning]
enable = false
dirty = true

[tool.mypy]
python_version = "3.11"
plugins = ["pydantic.mypy", "numpy.typing.mypy_plugin"]
show_column_numbers = true
show_error_context = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
strict = true
ignore_missing_imports = true
disable_error_code = [ ]
enable_error_code = [
  "comparison-overlap",
  "explicit-override",
  "ignore-without-code",
  "no-any-return",
  "no-any-unimported",
  "no-untyped-call",
  "no-untyped-def",
  "possibly-undefined",
  "redundant-cast",
  "redundant-expr",
  "redundant-self",
  "truthy-bool",
  "truthy-iterable",
  "type-arg",
  "unimported-reveal",
  "unreachable",
  "unused-ignore",
]

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true

# mypy per-module options:
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = true

[tool.ruff]
target-version = "py311"
line-length = 120
lint.select = [
  "ARG",  # flake8-unused-argument
  "B",  # flake8-bugbear
  "C4",  # flake8-comprehensions
  "C90",  # mccabe
  "COM",  # flake8-commas
  # "D",  # pydocstyle
  "DTZ",  # flake8-datetimez
  "E",  # pycodestyle
  "EXE",  # flake8-executable
  "FA",  # flake8-future-annotations
  "FBT",  # flake8-boolean-trap
  "F",  # pyflakes
  "ICN",  # flake8-import-conventions
  # "I",  # isort
  "ISC",  # flake8-implicit-str-concat
  "N",  # pep8-naming
  "PL",  # Pylint
  "Q",  # flake8-quotes
  "RUF",  # Unused noqa
  "S",  # flake8-bandit
  "TID",  # flake8-tidy-imports
  "T",  # pyupgrade
  "T10",  # flake8-debugger
  "UP",  # pyupgrade
  "W",  # Warning
  "YTT",  # flake8-2020
]
lint.ignore = [
  "N812",  # lowercase-imported-as-non-lowercase
  "PLR0913",  # too-many-arguments
  "S101",  # assert
  "E501", # line-too-long
]
lint.unfixable = [
  "F401",  # Don't touch unused imports
]
lint.mccabe = { max-complexity = 14 }

[tool.codespell]
skip = '*.po,*.ts,*.lock'
